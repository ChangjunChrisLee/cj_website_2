{
  "hash": "69caf31440895ed7b5fd891bdd30abe6",
  "result": {
    "markdown": "---\ntitle: NLP\nsubtitle: 텍스트 전처리 및 분석\n---\n\n\n### Download example data\n\n1.  [speech_moon.txt](data/speech_moon.txt)\n2.  [speech_park.txt](data/speech_park.txt)\n\n<br>\n\n### \n\nText Pre-processing\n\n<br>\n\n#### Install required packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages('strigr') # 최신 R 버전에서 다운로드 불가능, 아래 코드들을 실행하여 수동설치로 대체\n# install.packages('magrittr') # 만약 반복해서 'Updating Loaded Packages' 알림 발생 시, '아니요' 선택\n# install.packages('glue')\n# install.packages('stringi')\n# install.packages('https://cran.r-project.org/src/contrib/Archive/stringr/stringr_1.4.1.tar.gz', repos = NULL, type = 'source')\n# install.packages('tidytext')\n```\n:::\n\n\n#### Import required libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.1.8\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(stringr)\nlibrary(tidytext)\n```\n:::\n\n\n#### Text Pre-processing (텍스트 전처리)\n\nImport speeches\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set to the path within the file where the current R script exists\nraw_moon <- readLines('data/speech_moon.txt', encoding = 'UTF-8')\nhead(raw_moon)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"정권교체 하겠습니다!\"                                                                                                                                                            \n[2] \"  정치교체 하겠습니다!\"                                                                                                                                                          \n[3] \"  시대교체 하겠습니다!\"                                                                                                                                                          \n[4] \"  \"                                                                                                                                                                              \n[5] \"  ‘불비불명(不飛不鳴)’이라는 고사가 있습니다. 남쪽 언덕 나뭇가지에 앉아, 3년 동안 날지도 울지도 않는 새. 그러나 그 새는 한번 날면 하늘 끝까지 날고, 한번 울면 천지를 뒤흔듭니다.\"\n[6] \"\"                                                                                                                                                                                \n```\n:::\n:::\n\n\nRemove unnecessary characters - str_replace_all\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Learn how it works with sample text\ntxt <- \"치킨은!! 맛있다. xyz 정말 맛있다!@#\"\ntxt\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"치킨은!! 맛있다. xyz 정말 맛있다!@#\"\n```\n:::\n\n```{.r .cell-code}\n# string = 처리할 텍스트, \n# pattern = 규칙, \n# replacement = 바꿀 문자\nstr_replace_all(string = txt, pattern = '[^가-힣]', replacement = ' ')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"치킨은   맛있다      정말 맛있다   \"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# raw_moon의 불필요한 문자 제거하기\nmoon <- raw_moon %>%\n  str_replace_all('[^가-힣]', ' ')\nhead(moon)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"정권교체 하겠습니다 \"                                                                                                                                                        \n[2] \"  정치교체 하겠습니다 \"                                                                                                                                                      \n[3] \"  시대교체 하겠습니다 \"                                                                                                                                                      \n[4] \"  \"                                                                                                                                                                          \n[5] \"   불비불명       이라는 고사가 있습니다  남쪽 언덕 나뭇가지에 앉아   년 동안 날지도 울지도 않는 새  그러나 그 새는 한번 날면 하늘 끝까지 날고  한번 울면 천지를 뒤흔듭니다 \"\n[6] \"\"                                                                                                                                                                            \n```\n:::\n:::\n\n\nRemove Consecutive Spaces\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntxt <- \"치킨은 맛있다 정말 맛있다 \"\ntxt\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"치킨은 맛있다 정말 맛있다 \"\n```\n:::\n\n```{.r .cell-code}\nstr_squish(txt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"치킨은 맛있다 정말 맛있다\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# moon에 있는 연속된 공백 제거하기\nmoon <- moon %>% \n  str_squish()\nhead(moon)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"정권교체 하겠습니다\"                                                                                                                                          \n[2] \"정치교체 하겠습니다\"                                                                                                                                          \n[3] \"시대교체 하겠습니다\"                                                                                                                                          \n[4] \"\"                                                                                                                                                             \n[5] \"불비불명 이라는 고사가 있습니다 남쪽 언덕 나뭇가지에 앉아 년 동안 날지도 울지도 않는 새 그러나 그 새는 한번 날면 하늘 끝까지 날고 한번 울면 천지를 뒤흔듭니다\"\n[6] \"\"                                                                                                                                                             \n```\n:::\n:::\n\n\nConvert data to tibble structure - as_tibble()\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmoon <- dplyr::as_tibble(moon)\nmoon\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 117 × 1\n   value                                                                        \n   <chr>                                                                        \n 1 \"정권교체 하겠습니다\"                                                        \n 2 \"정치교체 하겠습니다\"                                                        \n 3 \"시대교체 하겠습니다\"                                                        \n 4 \"\"                                                                           \n 5 \"불비불명 이라는 고사가 있습니다 남쪽 언덕 나뭇가지에 앉아 년 동안 날지도 울…\n 6 \"\"                                                                           \n 7 \"그 동안 정치와 거리를 둬 왔습니다 그러나 암울한 시대가 저를 정치로 불러냈습…\n 8 \"\"                                                                           \n 9 \"\"                                                                           \n10 \"우리나라 대통령 이 되겠습니다\"                                              \n# … with 107 more rows\n```\n:::\n:::\n\n\nPre-processing at once (feat. %\\>%)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmoon <- raw_moon %>% \n  str_replace_all('[^가-힣]', ' ') %>% # 한글만 남기기\n  str_squish() %>% # 연속된 공백 제거\n  as_tibble() # tibble로 변환\n```\n:::\n\n\n#### Tokenization - unnest_tokens()\n\nPractice with sample data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 샘플 텍스트로 작동 원리 알아보기\ntext <- tibble(value = \"대한민국은 민주공화국이다. 대한민국의 주권은 국민에게 있고, 모든 권력은 국민으로부터 나온다.\")\ntext\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  value                                                                        \n  <chr>                                                                        \n1 대한민국은 민주공화국이다. 대한민국의 주권은 국민에게 있고, 모든 권력은 국민…\n```\n:::\n\n```{.r .cell-code}\ntext %>% # 문장 기준 토큰화\n  unnest_tokens(input = value, # 토큰화할 텍스트\n                output = word, # 토큰을 담을 변수명\n                token = 'sentences') # 문장 기준\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 1\n  word                                                             \n  <chr>                                                            \n1 대한민국은 민주공화국이다.                                       \n2 대한민국의 주권은 국민에게 있고, 모든 권력은 국민으로부터 나온다.\n```\n:::\n\n```{.r .cell-code}\ntext %>% # 띄어쓰기 기준 토큰화\n  unnest_tokens(input = value,\n                output = word,\n                token = 'words')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 1\n   word          \n   <chr>         \n 1 대한민국은    \n 2 민주공화국이다\n 3 대한민국의    \n 4 주권은        \n 5 국민에게      \n 6 있고          \n 7 모든          \n 8 권력은        \n 9 국민으로부터  \n10 나온다        \n```\n:::\n\n```{.r .cell-code}\ntext %>% # 문자 기준 토큰화\n  unnest_tokens(input = value,\n                output = word,\n                token = 'characters')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 40 × 1\n   word \n   <chr>\n 1 대   \n 2 한   \n 3 민   \n 4 국   \n 5 은   \n 6 민   \n 7 주   \n 8 공   \n 9 화   \n10 국   \n# … with 30 more rows\n```\n:::\n\n```{.r .cell-code}\n# 연설문 토큰화하기 \nword_space <- moon %>% \n  unnest_tokens(input = value,\n                output = word,\n                token = 'words')\nword_space\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2,025 × 1\n   word      \n   <chr>     \n 1 정권교체  \n 2 하겠습니다\n 3 정치교체  \n 4 하겠습니다\n 5 시대교체  \n 6 하겠습니다\n 7 불비불명  \n 8 이라는    \n 9 고사가    \n10 있습니다  \n# … with 2,015 more rows\n```\n:::\n:::\n\n\n#### Word frequency visualization\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 단어 빈도 구하기 - count()\ntemp_word_space <- word_space %>% \n  count(word, sort = T)\ntemp_word_space\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,440 × 2\n   word             n\n   <chr>        <int>\n 1 합니다          27\n 2 수              16\n 3 있습니다        13\n 4 저는            13\n 5 등              12\n 6 있는            12\n 7 함께            12\n 8 만들겠습니다    11\n 9 일자리          10\n10 국민의           9\n# … with 1,430 more rows\n```\n:::\n\n```{.r .cell-code}\n# 한 글자로 된 단어 제거하기 - filter(str_count())\n# str_count = 문자열의 글자 수 구하기\nstr_count('배')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nstr_count('사과')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\n# 두 글자 이상만 남기기\ntemp_word_space <- temp_word_space %>% \n  filter(str_count(word) > 1)\ntemp_word_space\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,384 × 2\n   word             n\n   <chr>        <int>\n 1 합니다          27\n 2 있습니다        13\n 3 저는            13\n 4 있는            12\n 5 함께            12\n 6 만들겠습니다    11\n 7 일자리          10\n 8 국민의           9\n 9 우리             9\n10 우리나라         9\n# … with 1,374 more rows\n```\n:::\n\n```{.r .cell-code}\n# 한 번에 작업하기\nword_space <- word_space %>% \n  count(word, sort = T) %>% \n  filter(str_count(word) > 1)\nword_space\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,384 × 2\n   word             n\n   <chr>        <int>\n 1 합니다          27\n 2 있습니다        13\n 3 저는            13\n 4 있는            12\n 5 함께            12\n 6 만들겠습니다    11\n 7 일자리          10\n 8 국민의           9\n 9 우리             9\n10 우리나라         9\n# … with 1,374 more rows\n```\n:::\n\n```{.r .cell-code}\n# 자주 사용된 단어 추출하기\ntop20 <- word_space %>% \n  head(20)\ntop20\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 × 2\n   word             n\n   <chr>        <int>\n 1 합니다          27\n 2 있습니다        13\n 3 저는            13\n 4 있는            12\n 5 함께            12\n 6 만들겠습니다    11\n 7 일자리          10\n 8 국민의           9\n 9 우리             9\n10 우리나라         9\n11 새로운           8\n12 위해             8\n13 그리고           7\n14 나라             7\n15 나라가           7\n16 지금             7\n17 낡은             6\n18 대통령이         6\n19 되겠습니다       6\n20 없는             6\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# 막대 그래프 만들기 - geom_col()\n# mac 사용자, 그래프에 한글 지원폰트로 변경\n# theme_set(theme_gray(base_family = \"AppleGothic\"))\nggplot2::ggplot(top20, aes(x = reorder(word, n), y = n)) + # 단어 빈도순 정렬\n  geom_col() +\n  coord_flip() # 회전\n```\n\n::: {.cell-output-display}\n![](NLP_1_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# 그래프 다듬기\nggplot(top20, aes(x = reorder(word, n), y = n)) +\n  geom_col() + \n  coord_flip() +\n  geom_text(aes(label = n), hjust = -0.3) +\n  labs(title = '문재인 대통령 출마 연설문 단어 빈도',\n       x = NULL, y = NULL) +\n  theme(title = element_text(size = 12))\n```\n\n::: {.cell-output-display}\n![](NLP_1_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# 워드 클라우드 만들기 - geom_text_wordcloud() \n# install.packages('ggwordcloud')\nlibrary(ggwordcloud)\n\nggplot(word_space, aes(label = word, size = n)) +\n  geom_text_wordcloud(seed = 1234) +\n  scale_radius(limits = c(3, NA), # 최소, 최대 단어 빈도\n               range = c(3, 30)) # 최소, 최대 글자 크기\n```\n\n::: {.cell-output-display}\n![](NLP_1_files/figure-html/unnamed-chunk-13-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# 그래프 다듬기\nggplot(word_space, \n       aes(label = word, \n           size = n,\n           col = n)) + # 빈도에 따라 색깔 표현\n  geom_text_wordcloud(seed = 1234) +\n  scale_radius(limits = c(3, NA),\n               range = c(3, 30)) +\n  scale_color_gradient(low = '#66aaf2', # 최소 빈도 색깔\n                       high = '#004EA1') + # 최대 빈도 색깔\n  theme_minimal() # 배경 없는 테마 적용\n```\n\n::: {.cell-output-display}\n![](NLP_1_files/figure-html/unnamed-chunk-13-3.png){width=672}\n:::\n:::\n\n\n### Morphological analysis\n\n형태소 단위 분석\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 그래프 폰트 바꾸기\n# 1. 구글 폰트 불러오기 - font_add_google()\n# install.packages('showtext')\nlibrary(showtext)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: sysfonts\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: showtextdb\n```\n:::\n\n```{.r .cell-code}\n# install.packages('jsonlite')\n# install.packages('curl')\n\nfont_add_google(name = 'Nanum Gothic', family = 'nanumgothic')\nshowtext_auto()\n\n# 2. 그래프에 폰트 지정하기\nggplot(word_space,\n       aes(label = word,\n           size = n,\n           col = n)) +\n  geom_text_wordcloud(seed = 1234,\n                      family = 'nanumgothic') + # 폰트 적용\n  scale_radius(limits = c(3,NA),\n               range = c(3,30)) +\n  scale_color_gradient(low = '#66aaf2',\n                       high = '#004EA1') +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](NLP_1_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# '검은고딕' 폰트 적용\nfont_add_google(name = 'Black Han Sans', family = 'blackhansans')\nshowtext_auto()\n\nggplot(word_space,\n       aes(label = word,\n           size = n,\n           col = n)) +\n  geom_text_wordcloud(seed = 1234,\n                      family = 'blackhansans') + # 폰트 적용\n  scale_radius(limits = c(3,NA),\n               range = c(3,30)) +\n  scale_color_gradient(low = '#66aaf2',\n                       high = '#004EA1') +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](NLP_1_files/figure-html/unnamed-chunk-14-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# 3. ggplot2 패키지로 만든 그래프의 폰트 바꾸기\nfont_add_google(name = 'Gamja Flower', family = 'gamjaflower')\nshowtext_auto()\n\nggplot(top20, aes(x = reorder(word, n), y = n)) +\n  geom_col() +\n  coord_flip() +\n  geom_text(aes(label = n), hjust = -0.3) + \n  labs(title = '문재인 대통령 출마 연설문 단어 빈도',\n       x = NULL, y = NULL) +\n  theme(title = element_text(size = 12), text = element_text(family = 'gamjaflower')) # 폰트 적용\n```\n\n::: {.cell-output-display}\n![](NLP_1_files/figure-html/unnamed-chunk-14-3.png){width=672}\n:::\n\n```{.r .cell-code}\n# ggplot2 기본 테마 폰트 변경하기 --------------------------------------------------------\n# 매번 theme()를 이용해 폰트를 지정하는게 번거롭다면 ggplot2 패키지 기본 테마 폰트 설정\ntheme_set(theme_gray(base_family = 'nanumgothic'))\n```\n:::\n\n\nKoNLP 한글 형태소 분석 패키지 설치하기\n\n<https://github.com/youngwoos/Doit_R/blob/master/FAQ/install_KoNLP.md>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1. 자바와 rJava 패키지 설치하기\n# install.packages('multilinguer')\nlibrary(multilinguer)\n```\n:::\n\n\n반드시 Amazon Corretto 설치 후, RStudio 종료 + 재시작하기\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install_jdk()\n```\n:::\n\n\nKoNLP 의존성 패키지 설치하기\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(c('stringr', 'hash', 'tau', 'Sejong', 'RSQLite', 'devtools'), type = 'binary')\n```\n:::\n\n\nKoNLP 패키지 설치하기\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages('remotes')\n# remotes::install_github('haven-jeon/KoNLP',\n#                         upgrade = 'never',\n#                         INSTALL_opts = c('--no-multiarch'))\n\n\n# 'scala-library-2.11.8.jar' 에러 발생 시, download.file 코드 실행\n\n# download.file(url = \"https://repo1.maven.org/maven2/org/scala-lang/scala-library/2.11.8/scala-library-2.11.8.jar\",\n#               destfile = paste0(.libPaths()[1], \"/KoNLP/Java/scala-library-2.11.8.jar\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(KoNLP) # Fail to locate \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nChecking user defined dictionary!\n```\n:::\n\n```{.r .cell-code}\n# Checking user defined dictionary! <- 해당 문구는 에러가 아니고 아래 useNIADic() 실행하여 사전을 설정\n\n# useNIADic() \n# 다운로드 항목 출력 시, 'All' 선택하여 다운로드\n```\n:::\n\n\n<br>\n\n형태소 분석기를 이용해 토큰화하기 - 명사 추출 샘플 텍스트로 작동 원리 알아보기\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntext <- tibble(\n  value = c(\"대한민국은 민주공화국이다.\",\n            \"대한민국의 주권은 국민에게 있고, 모든 권력은 국민으로부터 나온다.\"))\ntext\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 1\n  value                                                            \n  <chr>                                                            \n1 대한민국은 민주공화국이다.                                       \n2 대한민국의 주권은 국민에게 있고, 모든 권력은 국민으로부터 나온다.\n```\n:::\n\n```{.r .cell-code}\n# extraNoun(): 문장에서 추출한 명사를 list 구조로 출력\nextractNoun(text$value)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"대한민국\"   \"민주공화국\"\n\n[[2]]\n[1] \"대한민국\" \"주권\"     \"국민\"     \"권력\"     \"국민\"    \n```\n:::\n\n```{.r .cell-code}\n# unnest_tokens()를 이용해 명사 추출하기, 다루기 쉬운 tibble 구조로 명사 출력\nlibrary(tidytext)\n\ntext %>% \n  unnest_tokens(input = value, # 분석 대상\n                output = word, # 출력 변수명\n                token = extractNoun) # 토큰화 함수\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 × 1\n  word      \n  <chr>     \n1 대한민국  \n2 민주공화국\n3 대한민국  \n4 주권      \n5 국민      \n6 권력      \n7 국민      \n```\n:::\n\n```{.r .cell-code}\n# 띄어쓰기 기준 추출\ntext %>% \n  unnest_tokens(input = value,\n                output = word,\n                token = 'words')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 1\n   word          \n   <chr>         \n 1 대한민국은    \n 2 민주공화국이다\n 3 대한민국의    \n 4 주권은        \n 5 국민에게      \n 6 있고          \n 7 모든          \n 8 권력은        \n 9 국민으로부터  \n10 나온다        \n```\n:::\n\n```{.r .cell-code}\n# 명사 추출\ntext %>% \n  unnest_tokens(input = value,\n                output = word,\n                token = extractNoun)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 × 1\n  word      \n  <chr>     \n1 대한민국  \n2 민주공화국\n3 대한민국  \n4 주권      \n5 국민      \n6 권력      \n7 국민      \n```\n:::\n\n```{.r .cell-code}\n# 연설문에서 명사 추출하기\n# 문재인 대통령 연설문 불러오기\n\nraw_moon <- readLines('data/speech_moon.txt', encoding = 'UTF-8')\n\n# 기본적인 전처리\nlibrary(stringr)\n# install.packages('textclean')\nlibrary(textclean)\n\nmoon <- raw_moon %>% \n  str_replace_all('[^가-힣]', ' ') %>% \n  str_squish() %>% \n  as_tibble()\nmoon\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 117 × 1\n   value                                                                        \n   <chr>                                                                        \n 1 \"정권교체 하겠습니다\"                                                        \n 2 \"정치교체 하겠습니다\"                                                        \n 3 \"시대교체 하겠습니다\"                                                        \n 4 \"\"                                                                           \n 5 \"불비불명 이라는 고사가 있습니다 남쪽 언덕 나뭇가지에 앉아 년 동안 날지도 울…\n 6 \"\"                                                                           \n 7 \"그 동안 정치와 거리를 둬 왔습니다 그러나 암울한 시대가 저를 정치로 불러냈습…\n 8 \"\"                                                                           \n 9 \"\"                                                                           \n10 \"우리나라 대통령 이 되겠습니다\"                                              \n# … with 107 more rows\n```\n:::\n\n```{.r .cell-code}\n# 명사 기준 토큰화\nword_noun <- moon %>% \n  unnest_tokens(input = value,\n                output = word,\n                token = extractNoun)\nword_noun\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,757 × 1\n   word      \n   <chr>     \n 1 \"정권교체\"\n 2 \"하겠습니\"\n 3 \"정치\"    \n 4 \"교체\"    \n 5 \"하겠습니\"\n 6 \"시대\"    \n 7 \"교체\"    \n 8 \"하겠습니\"\n 9 \"\"        \n10 \"불비불명\"\n# … with 1,747 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# 단어 빈도 구하기\nword_noun <- word_noun %>% \n  count(word, sort = T) %>% # 단어 빈도 구해 내림차순 정렬\n  filter(str_count(word) > 1) # 두 글자 이상만 남기기\nword_noun\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 704 × 2\n   word       n\n   <chr>  <int>\n 1 국민      21\n 2 일자리    21\n 3 나라      19\n 4 우리      17\n 5 경제      15\n 6 사회      14\n 7 성장      13\n 8 대통령    12\n 9 정치      12\n10 하게      12\n# … with 694 more rows\n```\n:::\n\n```{.r .cell-code}\n# 띄어쓰기 기준 추출\nmoon %>% \n  unnest_tokens(input = value,\n                output = word,\n                token = 'words') %>% \n  count(word, sort = T) %>% \n  filter(str_count(word) > 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,384 × 2\n   word             n\n   <chr>        <int>\n 1 합니다          27\n 2 있습니다        13\n 3 저는            13\n 4 있는            12\n 5 함께            12\n 6 만들겠습니다    11\n 7 일자리          10\n 8 국민의           9\n 9 우리             9\n10 우리나라         9\n# … with 1,374 more rows\n```\n:::\n\n```{.r .cell-code}\n# 명사 추출\nmoon %>% \n  unnest_tokens(input = value,\n                output = word,\n                token = extractNoun) %>% \n  count(word, sort = T) %>% \n  filter(str_count(word) > 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 704 × 2\n   word       n\n   <chr>  <int>\n 1 국민      21\n 2 일자리    21\n 3 나라      19\n 4 우리      17\n 5 경제      15\n 6 사회      14\n 7 성장      13\n 8 대통령    12\n 9 정치      12\n10 하게      12\n# … with 694 more rows\n```\n:::\n\n```{.r .cell-code}\n# 상위 20개 단어 추출\ntop20 <- word_noun %>% \n  head(20)\ntop20\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 × 2\n   word         n\n   <chr>    <int>\n 1 국민        21\n 2 일자리      21\n 3 나라        19\n 4 우리        17\n 5 경제        15\n 6 사회        14\n 7 성장        13\n 8 대통령      12\n 9 정치        12\n10 하게        12\n11 대한민국    11\n12 평화        11\n13 복지        10\n14 우리나라    10\n15 확대        10\n16 들이         9\n17 사람         9\n18 산업         9\n19 정부         9\n20 복지국가     8\n```\n:::\n\n```{.r .cell-code}\n# 막대 그래프 만들기\nlibrary(showtext)\nfont_add_google(name = 'Nanum Gothic', family = 'nanumgothic')\nshowtext_auto()\n\nggplot(top20, aes(x = reorder(word, n), y = n)) +\n  geom_col() +\n  coord_flip() +\n  geom_text(aes(label = n), hjust = -0.3) +\n  labs(x = NULL) +\n  theme(text = element_text(family = 'nanumgothic'))\n```\n\n::: {.cell-output-display}\n![](NLP_1_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# 워드 클라우드 만들기\n# 폰트 설정\nfont_add_google(name = 'Black Han Sans', family = 'blackhansans')\nshowtext_auto()\n\nlibrary(ggwordcloud)\nggplot(word_noun, aes(label = word, size = n, col = n)) +\n  geom_text_wordcloud(seed = 1234, family = 'blackhansans') +\n  scale_radius(limits = c(3,NA),\n               range = c(3,15)) +\n  scale_color_gradient(low = '#66aaf2', high = '#004EA1') +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](NLP_1_files/figure-html/unnamed-chunk-21-2.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# 문장 기준으로 토큰화하기\nsentences_moon <- raw_moon %>% \n  str_squish() %>% \n  as_tibble() %>% \n  unnest_tokens(input = value,\n                output = sentence,\n                token = 'sentences')\nsentences_moon\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 207 × 1\n   sentence                                                               \n   <chr>                                                                  \n 1 정권교체 하겠습니다!                                                   \n 2 정치교체 하겠습니다!                                                   \n 3 시대교체 하겠습니다!                                                   \n 4 ‘불비불명(不飛不鳴)’이라는 고사가 있습니다.                            \n 5 남쪽 언덕 나뭇가지에 앉아, 3년 동안 날지도 울지도 않는 새.             \n 6 그러나 그 새는 한번 날면 하늘 끝까지 날고, 한번 울면 천지를 뒤흔듭니다.\n 7 그 동안 정치와 거리를 둬 왔습니다.                                     \n 8 그러나 암울한 시대가 저를 정치로 불러냈습니다.                         \n 9 더 이상 남쪽 나뭇가지에 머무를 수 없었습니다.                          \n10 이제 저는 국민과 함께 높이 날고 크게 울겠습니다.                       \n# … with 197 more rows\n```\n:::\n\n```{.r .cell-code}\n# 특정 단어가 사용된 문장 추출하기 - str_detect()\n# 예시\nstr_detect('치킨은 맛있다', '치킨')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nstr_detect('치킨은 맛있다', '피자')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n# 특정 단어가 사용된 문장 추출하기, '국민'\nsentences_moon %>% \n  filter(str_detect(sentence, '국민'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 19 × 1\n   sentence                                                                     \n   <chr>                                                                        \n 1 이제 저는 국민과 함께 높이 날고 크게 울겠습니다.                             \n 2 오늘 저는 제18대 대통령선거 출마를 국민 앞에 엄숙히 선언합니다.              \n 3 존경하는 국민 여러분!                                                        \n 4 국민이 모두 아픕니다.                                                        \n 5 국민 한 사람 한 사람이 모두 아픕니다.                                        \n 6 국민들에게 희망을 주는 정치가 절실하게 필요합니다.                           \n 7 국민의 뜻이 대통령의 길입니다.                                               \n 8 저는 대선출마를 결심하고 국민 여러분께 출마선언문을 함께 쓰자고 제안 드렸습… \n 9 시민의 한숨과 눈물을 닦아주지 못하는 정치가 있었고, 오히려 국민의 걱정거리가…\n10 상식이 통하는 사회, 권한과 책임이 비례하는 사회, 다름을 인정하는 세상, 개천… \n11 그러나 거창하게만 들리는 이 국가비전 역시 국민의 마음속에 있었습니다.        \n12 더욱 낮아지고 겸손해져서 국민의 마음속으로 들어가라.                         \n13 국민들이 제게 준 가르침입니다.                                               \n14 국민의 뜻에서 대통령의 길을 찾겠습니다.                                      \n15 문화혁신을 통해 모든 국민의 창조성을 높이고 이를 통해 기술혁신과 신산업 형성…\n16 이렇게 하면 국민의 살림이 서서히 나아질 것이며 5년 뒤에는 큰 성과가 나타날 … \n17 이명박 정부의 방해에도 불구하고 끝내 국민이 지켜준 세종시, 혁신도시를 지방 … \n18 존경하는 국민 여러분!                                                        \n19 국민의 마음에서 길을 찾는 우리나라 대통령이 되겠습니다.                      \n```\n:::\n\n```{.r .cell-code}\n# 특정 단어가 사용된 문장 추출하기, '일자리'\nsentences_moon %>% \n  filter(str_detect(sentence, '일자리'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 18 × 1\n   sentence                                                                     \n   <chr>                                                                        \n 1 빚 갚기 힘들어서, 아이 키우기 힘들어서, 일자리가 보이지 않아서 아픕니다.     \n 2 상생과 평화의 대한민국은 공평과 정의에 바탕을 두고, 성장의 과실을 함께 누리… \n 3 복지의 확대를 통해 보육, 교육, 의료, 요양 등 사회서비스 부문에 수많은 일자리…\n 4 결국 복지국가로 가는 길은 사람에 대한 투자, 일자리 창출, 자영업 고통 경감, … \n 5 ‘일자리 정부’로 ‘일자리 혁명’을 이루겠습니다.                                \n 6 복지의 확대와 함께 저는 강력한 ‘일자리 혁명’을 이루고자 합니다.              \n 7 지금 너무나 많은 젊은이들과 실업자, 비정규직 종사자, 근로능력이 있는 고령자… \n 8 좋은 일자리 창출을 위해 비정규직의 정규직 전환 촉진, 비정규직에 대한 차별철… \n 9 또한 정보통신 산업, 바이오산업, 나노 산업, 신재생에너지 산업, 문화산업과 콘… \n10 그리고 앞에서 말한 보육, 교육, 의료, 복지 등 사회서비스 부문은 무궁무진한 잠…\n11 일자리 없는 곳에서 희망을 찾을 수 없습니다.                                  \n12 지방 일자리에 대해 특별한 노력을 기울이겠습니다.                             \n13 지역균형발전은 곧 산업 균형, 일자리 균형이 목표입니다.                       \n14 이명박 정부의 방해에도 불구하고 끝내 국민이 지켜준 세종시, 혁신도시를 지방 … \n15 이 모든 정책의 실효성을 담보하기 위해 대통령이 되면 저는 가장 먼저 대통령 직…\n16 저는 먼 훗날 ‘일자리 혁명을 일으킨 대통령’으로 평가받기를 희망합니다.        \n17 또한 좋은 일자리와 산업혁신을 위해서는 평생학습체제가 뒷받침되어야 합니다.   \n18 노인 일자리를 늘리고, 특히 그 연륜과 경험을 지역사회에 활용할 수 있는 방안도…\n```\n:::\n:::\n",
    "supporting": [
      "NLP_1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}