---
title: "Data Visualization (2)"
subtitle: "Advanced topics in viz"
Week: 9
slide-format: revealjs
---

[Weekly design](https://changjunlee.com/teaching/ds101/weekly/)

<br>

### Pre-class video

<br>

#### Data visualization (2)

<br>

{{< video https://youtu.be/9optOjc5EGw >}}

<br>

```{r}
library(tidyverse)
library(gapminder)


# 03 Visualization Tool

head(cars)

# type="p" is the point plot, main="cars" is the title of the graph
plot(cars, type = "p", main = "cars")

plot(cars, type = "l", main = "cars") # type ="l" is a plot using lines
plot(cars, type="b", main="cars") # type="b" is a plot using both points and lines
plot(cars, type = "h", main = "cars") # type = "h" is a bar graph such as a histogram

x = gapminder %>% filter(year == 1952 & continent == "Asia") %>% mutate(gdp = gdpPercap*pop) %>% select(country, gdp) %>% arrange(desc(gdp)) %>% head()
pie(x$gdp, x$country)
barplot(x$gdp, names.arg = x$country)


x = gapminder %>% filter(year == 2007 & continent == "Asia") %>% mutate(gdp = gdpPercap*pop) %>% select(country, gdp) %>% arrange(desc(gdp)) %>% head()
pie(x$gdp, x$country)
barplot(x$gdp, names.arg = x$country)


matplot(iris[, 1:4], type = "l")
legend("topleft", names(iris)[1:4], lty = c(1, 2, 3, 4), col = c(1, 2, 3, 4))



hist(cars$speed)

```

```{r}

ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, col = continent)) + geom_point(alpha = 0.2)

gapminder %>% filter(lifeExp>70) %>%
   group_by(continent) %>%
   summarize(n = n_distinct(country)) %>%
   ggplot(aes(x = continent, y = n)) +
   geom_bar(stat = "identity")


gapminder %>% filter(year == 2007) %>%
   ggplot(aes(lifeExp, col = continent)) +
   geom_histogram()

gapminder %>% filter(year == 2007) %>%
   ggplot(aes(lifeExp, col = continent)) +
   geom_histogram(position = "dodge")

gapminder %>%
   filter(year == 2007) %>%
   ggplot(aes(continent, lifeExp, col = continent)) +
   geom_boxplot()

ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, col = continent)) +
   geom_point(alpha = 0.2)
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, col = continent)) +
   geom_point(alpha = 0.2) + scale_x_log10() # Convert the horizontal axis to log scale.


gapminder %>%
   filter(continent == "Africa") %>%
   ggplot(aes(country, lifeExp)) +
   geom_bar(stat = "identity") # [Figure 6-35(a)]

gapminder %>%
   filter(continent == "Africa") %>%
   ggplot(aes(country, lifeExp)) +
   geom_bar(stat = "identity") +
   coord_flip() # [Figure 6-35(b)] Switches the direction of the plot.

```

```{r}
# install.packages("RColorBrewer")
library(RColorBrewer)

display.brewer.all()


# [Figure 6-37(a)]: Graph with basic palette applied
gapminder %>% filter(lifeExp>70) %>%
   group_by(continent) %>%
   summarize(n = n_distinct(country)) %>%
   ggplot(aes(x = continent, y = n)) +
   geom_bar(stat = "identity", aes(fill = continent))

# [Figure 6-37(b)]: Graph applying the Spectral palette
gapminder %>%
   filter(lifeExp>70) %>%
   group_by(year, continent) %>%
   summarize(n = n_distinct(country)) %>%
   ggplot(aes(x = continent, y = n)) +
   geom_bar(stat = "identity", aes(fill = continent)) + 
  scale_fill_brewer(palette = "Spectral")

help(geom_bar)
# [Figure 6-37(c)] Graph applying the Blues palette
gapminder %>%
   filter(lifeExp>70) %>%
   group_by(continent) %>%
   summarize(n = n_distinct(country)) %>%
   ggplot(aes(x = continent, y = n)) +
   geom_bar(stat = "identity", aes(fill = continent)) + scale_fill_brewer(palette = "Blues")


# [Figure 6-37(d)] Graph applying the Oranges palette
gapminder %>%
   filter(lifeExp>70) %>%
   group_by(continent) %>%
   summarize(n = n_distinct(country)) %>%
   ggplot(aes(x = continent, y = n)) +
   geom_bar(stat = "identity", aes(fill = continent)) + scale_fill_brewer(palette = "Oranges")
```

```{r}

# reorder(continent, -n) means sort the continents in descending order based on n
gapminder %>%
   filter(lifeExp >70) %>%
   group_by(continent) %>%
   summarize(n = n_distinct(country)) %>%
   ggplot(aes(x = reorder(continent, -n), y = n)) +
   geom_bar(stat = "identity", aes(fill = continent)) +
   scale_fill_brewer(palette = "Blues")


# Training!!
gapminder %>%
   filter(continent == "Africa", year==2007) %>%
   ggplot(aes(reorder(country, lifeExp), lifeExp, fill=lifeExp)) +
   geom_bar(stat = "identity") +
   coord_flip()
#
gapminder %>%
   filter(continent == "Africa", year==2007) %>%
   ggplot(aes(reorder(country, lifeExp), lifeExp, fill=lifeExp)) +
   geom_bar(stat = "identity") +
   coord_flip() +
   scale_fill_distiller(palette = "Oranges", direction=1)
```

```{r}
# 04 Data exploration using visualization #

gapminder %>% ggplot(aes(gdpPercap, lifeExp, col = continent)) + geom_point(alpha = 0.2) + facet_wrap(~year) + scale_x_log10()

gapminder %>% filter(year == 1952 & gdpPercap > 10000 & continent == "Asia")

gapminder %>% filter(country == "Kuwait") %>% ggplot(aes(year, gdpPercap)) + geom_point() + geom_line() # [Figure 6-40(a)]
gapminder %>% filter(country == "Kuwait") %>% ggplot(aes(year, pop)) + geom_point() + geom_line() # [Figure 6-40(b)]

gapminder %>% filter(country == "Korea, Rep.") %>% ggplot(aes(year, gdpPercap)) + geom_point() + geom_line() # [Figure 6-41(a)]
gapminder %>% filter(country == "Korea, Rep.") %>% ggplot(aes(year, pop)) + geom_point() + geom_line() # [Figure 6-41(b)]

gapminder %>% filter(country == "Kuwait" | country == "Korea, Rep.") %>% mutate(gdp = gdpPercap*pop) %>% ggplot(aes(year, gdp, col = country)) + geom_point() + geom_line()

# [Figure 6-43(a)] Comparison of changes in gdpPercap
gapminder %>% filter(country == "Kuwait"|country == "Saudi Arabia"|country == "Iraq"|country == "Iran"|country == "Korea, Rep."|country == "China "|country == "Japan") %>% ggplot(aes(year, gdpPercap, col = country)) + geom_point() + geom_line()

# [Figure 6-43(b)] Comparison of changes in pop
gapminder %>% filter(country == "Kuwait"|country=="Saudi Arabia"|country == "Iraq"|country == "Iran"|country == "Korea, Rep."|country == "China "|country == "Japan") %>% ggplot(aes(year, pop, col=country)) + geom_point() + geom_line()

# [Figure 6-43(c)] Comparison of changes in gdp
gapminder %>% filter(country == "Kuwait"|country == "Saudi Arabia"|country == "Iraq"|country == "Iran"|country == "Korea, Rep."|country == "China "|country == "Japan") %>% mutate(gdp=gdpPercap*pop) %>% ggplot(aes(year, gdp, col = country)) + geom_point() + geom_line() + scale_y_log10()
```

### Class

<br>

#### Review for ggplot2 library

<br>


```{r}
library(tidyverse)

mpg %>% select(hwy, cty, cyl)

```




```{r}

ggplot(mpg, aes(hwy, cty)) +
  geom_point(aes(color = as.factor(cyl)))

```

```{r}

ggplot(mpg, aes(hwy, cty)) +
  geom_point(aes(color = as.factor(cyl))) +
  geom_smooth(method ="lm")
```

```{r}

ggplot(mpg, aes(hwy, cty)) +
  geom_point(aes(color = as.factor(cyl))) +
  geom_smooth(method ="glm")
```

```{r}

ggplot(mpg, aes(hwy, cty)) +
  geom_point(aes(color = cyl)) +
  geom_smooth(method ="lm") +
  # coord_cartesian() +
  # scale_color_gradient() +
  theme_bw()
```

```{r}

# Returns the last plot
last_plot()
```

```{r}

# Saves last plot as 5’ x 5’ file named "plot.png" in
# working directory. Matches file type to file extension.
# ggsave("plot.png", width = 5, height = 5)
```

#### One variable


```{r}

# Continuous
a <- ggplot(mpg, aes(hwy))
a

```


```{r}

a + geom_area(stat = "bin")
a + geom_density(kernel = "gaussian")
a + geom_dotplot()
a + geom_freqpoly()
a + geom_histogram(binwidth = 4)

```


```{r}
mpg %>% ggplot()+
  geom_area(aes(hwy), stat="bin")
```


```{r}

# Discrete
b <- ggplot(mpg, aes(fl))
b + geom_bar()

```


```{r}

# Two variables
# Continuous X & Countinuous Y
f <- ggplot(mpg, aes(cty, hwy))
f + geom_blank()
f + geom_jitter()
f + geom_point()

```


```{r}
# install.packages("quantreg")
library(quantreg)
f + geom_quantile() + geom_jitter()
f + geom_rug(sides = "bl") + geom_jitter()
f + geom_rug(sides = "bl") + geom_point()
f + geom_smooth(model = lm) +  geom_point()
f + geom_text(aes(label = cty)) + 
  geom_jitter()

f + geom_text(aes(label = fl))
```


```{r}
mpg %>% 
  ggplot(aes(cty, hwy, label = fl, 
             alpha=0.1, col='red')) +
  geom_text()+
  geom_jitter()
```


```{r}
# install.packages("ggimage")
library(ggimage)

img <- list.files(system.file("extdata", 
                              package="ggimage"),
                  pattern="png", full.names=TRUE)

img[2]
```


```{r}
f + geom_image(aes(image=img[2]))
```


```{r}

# Discrete X & Countinuous Y
g <- ggplot(mpg, aes(class, hwy))
levels(as.factor(mpg$class))
str(mpg$class)
levels(as.factor(mpg$class))
unique(mpg$class)
```


```{r}
mpg %>% count(class)
```


```{r}
mpg %>% select(manufacturer, class, hwy) %>% 
  group_by(class) %>% 
  arrange(desc(hwy)) %>% head(10) -> dkdk
```


```{r}
mpg %>% count(class)
```


```{r}
g
g + geom_bar(stat = "identity")
g + geom_boxplot()
```


```{r}

g + geom_dotplot(binaxis = "y",
                 stackdir = "center")
g + geom_violin(scale = "area")
```


```{r}
# Discrete X & Discrete Y
diamonds
h <- ggplot(diamonds, aes(cut, color))
h + geom_jitter()
```


```{r}
# Continuous Bivariate Distribution
# install.packages("ggplot2movies")
library(ggplot2movies)

movies %>% glimpse
```


```{r}
i <- ggplot(movies, aes(year, rating))
i + geom_bin2d(binwidth = c(5, 0.5))
i + geom_density2d()
```


```{r}
# install.packages("hexbin")
library(hexbin)
i + geom_hex()
```


```{r}
# Continuous Function
j <- ggplot(economics, aes(date, unemploy))
j + geom_area()
j + geom_line()
j + geom_step(direction = "hv")
```


```{r}
# Visualizing error
df <- data.frame(grp = c("A", "B"), fit = 4:5, se = 1:2)
k <- ggplot(df, 
            aes(grp, fit, 
                ymin = fit-se, 
                ymax = fit+se))

k + geom_crossbar(fatten = 2)

k + geom_errorbar(col="grey") +
  geom_point(aes(col="red")) 

k + geom_linerange()
k + geom_pointrange()
```


```{r}
# Three variables
?seals
seals$z <- with(seals, sqrt(delta_long^2 + delta_lat^2))
m <- ggplot(seals, aes(long, lat))

m + geom_tile(aes(fill = z))
m + geom_contour(aes(z = z))
m + geom_raster(aes(fill = z), hjust=0.5,
                vjust=0.5, interpolate=FALSE)
```


```{r}

# Scales
n <- b + geom_bar(aes(fill = fl))
n
n + scale_fill_manual(
  values = c("skyblue", "royalblue", "blue", "navy"),
  limits = c("d", "e", "p", "r"), breaks =c("d", "e", "p", "r"),
  name = "Fuel", labels = c("D", "E", "P", "R"))
```


```{r}
# Color and fill scales
n <- b + geom_bar(aes(fill = fl))
o <- a + geom_dotplot(aes(fill = ..x..))
```


```{r}
# install.packages("RColorBrewer")
library(RColorBrewer)

n + scale_fill_brewer(palette = "Blues")
```


```{r}
display.brewer.all()
n + scale_fill_grey(
  start = 0.2, end = 0.8,
  na.value = "red")
```


```{r}
o + scale_fill_gradient(
  low = "red",
  high = "yellow")

o + scale_fill_gradientn(
  colours = terrain.colors(5))


# Also: rainbow(), heat.colors(),
# topo.colors(), cm.colors(),
# RColorBrewer::brewer.pal()
```


```{r}
# Shape scales
f
p <- f + geom_point(aes(shape = fl))
p
```


```{r}
p + scale_shape(solid = FALSE)

p + scale_shape_manual(values = c(3:7))
```


```{r}

# Coordinate Systems
r <- b+geom_bar()
r + coord_cartesian(xlim = c(0, 5))
r + coord_fixed(ratio = 1/2)
r + coord_fixed(ratio = 1/10)
r + coord_fixed(ratio = 1/100)
r + coord_flip()
r + coord_polar(theta = "x", direction=1 )
```


```{r}
# Position Adjustments

s <- ggplot(mpg, aes(fl, fill = drv))

s + geom_bar(position = "dodge")
# Arrange elements side by side
s + geom_bar(position = "fill")
# Stack elements on top of one another, normalize height
s + geom_bar(position = "stack")
# Stack elements on top of one another
f + geom_point(position = "jitter")
# Add random noise to X and Y position of each element to avoid overplotting
```


```{r}
# Theme
r + theme_bw()
r + theme_classic()
r + theme_grey()
r + theme_minimal()
```


```{r}
# Faceting

t <- ggplot(mpg, aes(cty, hwy)) + geom_point()
t + facet_grid(. ~ fl)
t + facet_grid(fl ~ .)
# facet into columns based on fl
t + facet_grid(year ~ .)
# facet into rows based on year
t + facet_grid(year ~ fl)
# facet into both rows and columns
t + facet_wrap(~ fl)
# wrap facets into a rectangular layout
```


```{r}
# Labels
t + ggtitle("New Plot Title ")
# Add a main title above the plot
t + xlab("New X label")
# Change the label on the X axis
t + ylab("New Y label")
# Change the label on the Y axis
t + labs(title =" New title", x = "New x", y = "New y")
# All of the above
```


```{r}


mpg %>% 
  group_by(manufacturer) %>% 
  summarise(avg_hwy=mean(hwy)) %>% 
  arrange(desc(avg_hwy)) %>% 
  ggplot(aes(x=reorder(manufacturer, avg_hwy),
             y=avg_hwy,
             fill=avg_hwy))+
  scale_fill_gradient(
    low = "red",
    high = "green")+
  coord_flip()+
  geom_bar(stat='identity')+
  xlab("")+
  ggtitle("제조사별 평균 연비")


```


<br>



![![](images/clipboard-1479101379.png)](images/clipboard-3412891947.png)

![](images/clipboard-2307888705.png)

![](images/clipboard-2534032249.png)

![![](images/clipboard-3612321412.png)](images/clipboard-3249263830.png)

![![](images/clipboard-1646636809.png)](images/clipboard-731233151.png)

![![](images/clipboard-496416667.png)![](images/clipboard-1697567482.png)](images/clipboard-3425478297.png)

![![](images/clipboard-2333920269.png)](images/clipboard-284144821.png)

![![](images/clipboard-4069835101.png)](images/clipboard-2982844209.png)

![![](images/clipboard-414551926.png)](images/clipboard-1489968228.png)

![![](images/clipboard-768624633.png)](images/clipboard-2563614192.png)

![](images/clipboard-1639365330.png)
