---
title: "Basic Syntax (2)"
subtitle: "Array"
Week: 3
slide-format: revealjs
---

[Weekly design](https://changjunlee.com/teaching/ds101/weekly/)

<br>

### Pre-class video

<br>

#### Array

<br>

{{< video https://youtu.be/nmgGubmbcSM >}}

<br>

```{r}
# Create N-dimensional array

# Assign values 1 to 5 to a 2×4 matrix
x = array(1:5, c(2, 4)) 

x

# Print row 1 element value
x[1, ] 

# Print 2nd column element values
x[, 2] 

# Set row and column names
dimnamex = list(c("1st", "2nd"), c("1st", "2nd", "3rd", "4th")) 

x = array(1:5, c(2, 4), dimnames = dimnamex)
x
x["1st", ]
x[, "4th"]


# Create a two-dimensional array
x = 1:12
x
matrix(x, nrow = 3)
matrix(x, nrow = 3, byrow = T)


# Create an array by combining vectors
v1 = c(1, 2, 3, 4)
v2 = c(5, 6, 7, 8)
v3 = c(9, 10, 11, 12)

# Create an array by binding by column
cbind(v1, v2, v3) 
# Create array by binding row by row
rbind(v1, v2, v3) 

# Various matrix operations using the operators in [Table 3-7]
# Store two 2×2 matrices in x and y, respectively
x = array(1:4, dim = c(2, 2))
y = array(5:8, dim = c(2, 2))
x
y
x+y
x-y

# multiplication for each column
x * y 

# mathematical matrix multiplication
x %*% y 

# transpose matrix of x
t(x) 

# inverse of x
solve(x) 

# determinant of x
det(x) 
x = array(1:12, c(3, 4))
x

# If the center value is 1, apply the function row by row
apply(x, 1, mean) 

# If the center value is 2, apply the function to each column
apply(x, 2, mean) 
x = array(1:12, c(3, 4))
dim(x)
x = array(1:12, c(3, 4))

# Randomly mix and extract array elements
sample(x) 

# Select and extract 10 elements from the array
sample(x, 10) 
library(dplyr)
# ?sample

# The extraction probability for each element can be varied
sample(x, 10, prob = c(1:12)/24) 

# You can create a sample using just numbers
sample(10) 
```

------------------------------------------------------------------------

### Class

------------------------------------------------------------------------

-   Create a new project

    -   *\*.Rproj*

    -   \*.R

    -   getwd()

-   Variable and Object

    -   An object in R is a data structure used for storing data: Everything in R is an object, including functions, numbers, character strings, vectors, and lists. Each object has attributes such as its type (e.g., integer, numeric, character), its length, and often its dimensions. Objects can be complex structures, like data frames that hold tabular data, or simpler structures like a single numeric value or vector.

    -   A variable in R is a name that you assign to an object so that you can refer to it later in your code. When you assign data to a variable, you are effectively labeling that data with a name that you can use to call up the object later on.

Here's a simple example in R:

```{r}
my_vector <- c(1, 2, 3)
```

-   my_vector is a variable. It's a symbolic name that we're using to refer to some data we're interested in.

-   c(1, 2, 3) creates a vector object containing the numbers 1, 2, and 3.

-   This vector is the object, and it's the actual data structure that R is storing in memory.

```{r}
# remove all objects stored
rm()

# Create a vector 1 to 10
1:10

# Sampling 10 values from the vector 1:10
sample(1:10, 10)


X <- sample(1:10, 10)
# Extract 2nd to 5th elements of X
X[2:5]

```

<br>

-   Vectorized codes

```{r}
c(1, 2, 4) + c(2, 3, 5)

```

<br>

```{r}
X <- c(1,2,4,5)

X * 2

```

-   Recycling rule

```{r}
1:4 + c(1, 2)

X<-c(1,2,4,5)
X * 2

1:4 + 1:3

```

#### Pop-up Qz

Choose two if its type cannot be 'factor' variable in R

1.  GPA

2.  Blood type

3.  Grade (A,B,C,D,F)

4.  Height

5.  Gender

<br>

What is the result of the following R code?

```{r}
my_vector <- c(3.5, -1.6, TRUE, "R")
class(my_vector)

```

A)  "numeric"

B)  "logical"

C)  "character"

D)  "complex"

<br>

Consider the following R code. Which of the following is the correct way to access the second element of the my_vector?

```{r}
my_vector <- c(10, "20", 30)
sum(as.numeric(my_vector))
```

A)  60

B)  "60"

C)  40

D)  An error

<br>

### **Understanding Arrays in R: Concepts and Examples**

Arrays are a fundamental data structure in R that extend vectors by allowing you to store multi-dimensional data. While a vector has one dimension, arrays in R can have two or more dimensions, making them incredibly versatile for complex data organization.

#### What is an Array in R?

An array in R is a collection of elements of the same type arranged in a grid of a specified dimensionality. It is a multi-dimensional data structure that can hold values in more than two dimensions. Arrays are particularly useful in scenarios where operations on multi-dimensional data are required, such as matrix computations, tabulations, and various applications in data analysis and statistics.

#### Creating an Array

To create an array in R, you can use the **`array`** function. This function takes a vector of data and a vector of dimensions as arguments. For example:

```{r}
# Create a 2x3 array
my_array <- array(1:6, dim = c(2, 3))
print(my_array)

```

This code snippet creates a 2x3 array (2 rows and 3 columns) with the numbers 1 to 6.

#### Accessing Array Elements

Elements within an array can be accessed using indices for each dimension in square brackets **`[]`**. For example:

```{r}
# Access the element in the 1st row and 2nd column
element <- my_array[1, 2]
print(element)

```

#### Modifying Arrays

Just like vectors, you can modify the elements of an array by accessing them using their indices and assigning new values. For example:

```{r}
# Modify the element in the 1st row and 2nd column to be 20
my_array[1, 2] <- 20
print(my_array)

```

#### Operations on Arrays

R allows you to perform operations on arrays. These operations can be element-wise or can involve the entire array. For example, you can add two arrays of the same dimensions, and R will perform element-wise addition.

#### Example: Creating and Manipulating a 3D Array

```{r}
# Create a 3x2x2 array
my_3d_array <- array(1:12, dim = c(3, 2, 2))
print(my_3d_array)

# Access an element (2nd row, 1st column, 2nd matrix)
element_3d <- my_3d_array[2, 1, 2]
print(element_3d)

```

<br>

#### Quiz: Test Your Understanding of Arrays in R

<br>

**Question 1:** What is the output when accessing the third element in the second row and first column of a 3x3x3 array filled with elements from 1 to 27?

A\) 3\
B) 12\
C) 21\
D) 9

<br>

**Question 2:** Which of the following statements creates a 2x2x3 array containing the numbers 1 through 12 in R?

A\) **`array(1:12, dim = c(2, 2, 3))`**\
B) **`matrix(1:12, nrow = 2, ncol = 2)`**\
C) **`c(1:12)`**\
D) **`array(1:12, dim = c(3, 2, 2))`**

<br>

**Question 3:** How do you modify the element at position \[1, 1, 1\] in a 3-dimensional array named 'arr' to have a value of 100?

A\) **`arr[1] <- 100`**\
B) **`arr[1, 1, 1] <- 100`**\
C) **`arr[c(1, 1, 1)] <- 100`**\
D) Both B and C are correct.

<br>

#### Answers:

**Answer 1:** B) 12\
**Explanation:** Arrays in R are filled column-wise, so the third element in the second row and first column of the second matrix would be 12.

**Answer 2:** A) **`array(1:12, dim = c(2, 2, 3))`**\
**Explanation:** The **`array`** function with dimension argument **`c(2, 2, 3)`** will create a 2x2x3 array, filling the elements from 1 to 12 across the dimensions.

**Answer 3:** B) **`arr[1, 1, 1] <- 100`**\
**Explanation:** To modify a specific element in an array, you need to specify all its indices. The correct way is **`arr[1, 1, 1] <- 100`**.
