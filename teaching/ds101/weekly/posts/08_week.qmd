---
title: "Data Visualization (1)"
subtitle: "Data viz intro"
Week: 8
---

[Weekly design](https://changjunlee.com/teaching/ds101/weekly/)

<br>

### Pre-class video

<br>

#### Data visualization (1)

<br>

{{< video https://youtu.be/fm0LqCEBrr0 >}}

<br>

```{r}
# Data Visualization

# average
apply(anscombe, 1, mean)

apply(anscombe, 2, mean)

# Dispersion
apply(anscombe, 2, var)


# Correlation (correlation coefficient)
cor(anscombe$x1, anscombe$y1)

cor(anscombe$x2, anscombe$y2)

cor(anscombe$x3, anscombe$y3)

cor(anscombe$x4, anscombe$y4)

library(gapminder)
library(dplyr)
y <- gapminder %>% group_by(year, continent) %>% summarize(c_pop = sum(pop))
head(y, 20)

plot(y$year, y$c_pop)
plot(y$year, y$c_pop, col = y$continent)
plot(y$year, y$c_pop, col = y$continent, pch = c(1:5))
plot(y$year, y$c_pop, col = y$continent, pch = c(1:length(levels(y$continent))))

# Specify the number of legends as a number
legend("topright", legend = levels((y$continent)), pch = c(1:5), col = c(1:5))

# Specify the number of legends to match the number of data
legend("bottomleft", legend = levels((y$continent)), pch = c(1:length(levels(y$continent))), col = c(1:length(levels(y$continent))) )


# 02 Basic features of visualization #
plot(gapminder$gdpPercap, gapminder$lifeExp, col = gapminder$continent)
legend("bottomright", 
       legend = levels((gapminder$continent)),
        pch = c(1:length(levels(gapminder$continent))),
        col = c(1:length(levels(y$continent))))

plot(log10(gapminder$gdpPercap), gapminder$lifeExp, col = gapminder$continent)
legend("bottomright", legend = levels((gapminder$continent)), pch = c(1:length(levels(gapminder$continent))), col = c(1:length(levels(y$continent))) )

# install.packages("ggplot2")
library(ggplot2)
gapminder %>% ggplot(,aes())

ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, col = continent)) +
   geom_point() +
   scale_x_log10()

ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, col = continent, size = pop)) +
   geom_point() +
   scale_x_log10()

ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, col = continent, size = pop)) +
   geom_point(alpha = 0.5) +
   scale_x_log10()


table(gapminder$year)

gapminder %>% filter(year==1977) %>%
   ggplot(., aes(x=gdpPercap, y=lifeExp, col=continent, size=pop)) +
   geom_point(alpha=0.5) +
   scale_x_log10()


gapminder %>% filter(year==2007) %>%
   ggplot(., aes(x=gdpPercap, y=lifeExp, col=continent, size=pop)) +
   geom_point(alpha=0.5) +
   scale_x_log10()

ggplot(gapminder, aes(x=gdpPercap, y=lifeExp, col=continent, size=pop)) +
   geom_point(alpha=0.5) +
   scale_x_log10() +
   facet_wrap(~year)


gapminder %>%
   filter(year == 1952 & continent =="Asia") %>%
   ggplot(aes(reorder(country, pop), pop)) +
   geom_bar(stat = "identity") +
   coord_flip()

gapminder %>% filter(year==1952 & continent== "Asia") %>% ggplot(aes(reorder(country, pop), pop)) + geom_bar(stat = "identity") + scale_y_log10() + coord_flip ()

gapminder %>%
   filter(country == "Korea, Rep.") %>%
   ggplot(aes(year, lifeExp, col = country)) +
   geom_point() +
   geom_line()

gapminder %>%
   filter(country == "Korea, Rep.") %>%
   ggplot(aes(year, lifeExp, col = country)) +
   # geom_point() +
   geom_line()

gapminder %>%
   ggplot(aes(x = year, y = lifeExp, col = continent)) +
   geom_point(alpha = 0.2) +
   geom_smooth()

x = filter(gapminder, year == 1952)
hist(x$lifeExp, main = "Histogram of lifeExp in 1952")

x %>% ggplot(aes(lifeExp)) + geom_histogram()

x %>% ggplot(aes(continent, lifeExp)) + geom_boxplot()

plot(log10(gapminder$gdpPercap), gapminder$lifeExp)
```

### Class

<br>

Data visualization is an essential skill in data science, helping to turn complex results into comprehensible insights. In R, one of the most powerful tools for creating professional and visually appealing graphs is `ggplot2`. This package, built on the principles of the **Grammar of Graphics** by *Leland Wilkinson*, allows users to create graphs that are both informative and attractive. Let’s delve into the concepts and practical applications of `ggplot2` to enhance your data visualization skills.

<br>

{{< video https://youtu.be/7LXXm52Frbc >}}

<br>

#### **Grammar of Graphics**

![](images/clipboard-769522405.png){width="254"}

`ggplot2` is a system for declaratively creating graphics, based on [The Grammar of Graphics](https://www.amazon.com/Grammar-Graphics-Statistics-Computing/dp/0387245448/ref=as_li_ss_tl). You provide the data, tell ggplot2 how to map variables to aesthetics, what graphical primitives to use, and it takes care of the details.

See the official home of ggplot2: <https://ggplot2.tidyverse.org/>

<br>

### **Understanding ggplot2's Grammar of Graphics**

#### **Components of the Grammar**

At its core, ggplot2 operates on a coherent set of principles known as the "Grammar of Graphics." This framework allows you to specify graphs in terms of their underlying components:

![](https://ggplot2.tidyverse.org/articles/ggplot2_files/figure-html/overview_graphic-1.png)

-   **Aesthetics (`aes`)**: These define how data is mapped to visual properties like size, shape, and color.

-   **Geoms (geometric objects)**: These are the actual visual elements that represent data—points, lines, bars, etc.

-   **Stats (statistical transformations)**: Some plots require transformations, such as calculating means or fitting a regression line, which are handled by stats.

-   **Scales**: These control how data values are mapped to visual properties.

-   **Coordinate systems**: These define how plots are oriented, with Cartesian coordinates being the most common, but others like polar coordinates are available for specific needs.

-   **Facets**: Faceting allows you to generate multiple plots based on a grouping variable, creating a matrix of panels.

<br>

Let me explain with the official introduction of ggplot2: <https://ggplot2.tidyverse.org/articles/ggplot2.html>

<br>

### **Setting Up Your Environment**

Before diving into creating plots, you need to install and load ggplot2 in your R environment:

```{r}
# ggplot2 is a package belongs to tidyverse
library(tidyverse)
```

<br>

Test if it works.

```{r}
 ggplot(mpg, aes(displ, hwy, colour = class)) + geom_point()
```

<br>

### **Practical Examples**

#### **Basic Plots**

Let's start with a basic scatter plot to examine the relationship between two variables in the **`mtcars`** dataset:

```{r}
ggplot(data = mtcars, aes(x = wt, y = mpg)) + geom_point()
```

This code plots the miles per gallon (**`mpg`**) against the weight (**`wt`**) of various cars. The **`aes`** function maps the aesthetics to the respective variables.

#### **Enhancing Visualizations**

To enhance this plot, we might want to add a linear regression line to summarize the relationship between weight and fuel efficiency:

```{r}
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
  geom_point() +
  geom_smooth(method = "lm") +
  theme_minimal() +
  labs(title = "Fuel Efficiency vs. Weight", x = "Weight (1000 lbs)", y = "Miles per Gallon")

```

This code not only adds the regression line but also improves the aesthetics with a minimal theme and labels that clarify what each axis represents.

Practice once more with `palmer penguins` dataset.

```{r}
library(palmerpenguins)
glimpse(penguins)
```

Drop missing variables

```{r}
penguins %>% 
  drop_na()
```

```{r}
ggplot(penguins) +
  aes(x = bill_length_mm,
      y = bill_depth_mm,
      colour = species) +
  geom_point(shape = "circle", size = 1.5) +
  scale_color_manual(
    values = c(Adelie = "#F8766D",
    Chinstrap = "#00C19F",
    Gentoo = "#FF61C3")
  ) +
  ggthemes::theme_fivethirtyeight() +
  theme(legend.position = "bottom")
```

-   Layers in use above

    -   Layer connecting the X-axis and Y-axis

        -   `aes(x = bill_length_mm, y = bill_depth_mm, colour = species)`

    -   A layer that sets the elements of the graph

        -   `geom_point(shape = "circle", size = 1.5)`

    -   A layer that sets the color of the graph

        -   `scale_color_manual( values = c(Adelie = "#F8766D", Chinstrap = "#00C19F", Gentoo = "#FF61C3") )`

    -   A layer that sets the theme of the graph

        -   `ggthemes::theme_fivethirtyeight()`

    -   Layer to set the position of the legend

        -   `theme(legend.position = "bottom")`

<br>

### **Advanced ggplot2 Features**

#### **Faceting for Comparative Analysis**

To compare how the relationship between weight and fuel efficiency varies by the number of cylinders in the engine, we can use faceting:

```{r}
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
  geom_point() +
  facet_wrap(~cyl)

```

This will create a separate plot for each number of cylinders, making it easy to see differences across categories.

-   facet: a particular aspect of feature of something

```{r}
ggplot(penguins) +
  aes(x = bill_length_mm,
      y = bill_depth_mm,
      colour = species) +
  geom_point(shape = "circle", size = 1.5) +
  scale_color_manual(
    values = c(Adelie = "#F8766D",
    Chinstrap = "#00C19F",
    Gentoo = "#FF61C3")
  ) +
  ggthemes::theme_fivethirtyeight() +
  theme(legend.position = "bottom") +
  facet_wrap(~island)
```

```{r}
penguins %>% drop_na %>% 
ggplot() +
  aes(x = bill_length_mm,
      y = bill_depth_mm,
      colour = species) +
  geom_point(shape = "circle", size = 1.5) +
  scale_color_manual(
    values = c(Adelie = "#F8766D",
    Chinstrap = "#00C19F",
    Gentoo = "#FF61C3")
  ) +
  ggthemes::theme_fivethirtyeight() +
  theme(legend.position = "bottom") +
  facet_wrap(sex ~ island)
```

#### **Customization and Extensions**

Check out extentions of ggplot2: <https://exts.ggplot2.tidyverse.org/gallery/>

`ggplot2` is highly customizable, allowing extensive control over nearly every visual aspect of a plot. For users interested in making interactive plots, `ggplot2` can be integrated with the **`plotly`** library, transforming static charts into interactive visualizations.

The power and flexibility of ggplot2 make it an indispensable tool for data visualization in R. Whether you are a beginner or an experienced user, there is always more to explore and learn with ggplot2. Practice regularly, and don't hesitate to experiment with different components to discover the best ways to convey your insights visually.

<br>

To master ggplot2, see the videos below:

**ggplot2 workshop part 1** by Thomas Lin Pedersen

<https://www.youtube.com/watch?v=h29g21z0a68>

**ggplot2 workshop part 2** by Thomas Lin Pedersen

<https://www.youtube.com/watch?v=0m4yywqNPVY>
