---
title: "Data Exploration (1)"
subtitle: "Loop & Function"
Week: 6
slide-format: revealjs
---

[Weekly design](https://changjunlee.com/teaching/ds101/weekly/)

<br>

### Pre-class video

<br>

#### Loop

<br>

{{< video https://youtu.be/RzJk88OfKMc >}}

<br>

```{r}
x = 5
if(x %% 2 ==0) {
   print('x is an even number') # Performed when the conditional expression is true
} else {
   print('x is odd') # Performed when the conditional expression is false
}

x = 8
if(x>0) {
   print('x is a positive value.') # Print if x is greater than 0
} else if(x<0) {
   print('x is a negative value.') # Prints if the above condition is not satisfied and x is less than 0
} else {
   print('x is zero.') # Prints if all of the above conditions are not met
}


x = c(-5:5)
options(digits = 3) # Set the number of significant digits to 3 when expressing numbers
sqrt(x)


sqrt(ifelse(x>=0, x, NA)) # Display negative numbers as NA to prevent NaN from occurring

students = read.csv("data/students2.csv", fileEncoding = "CP949", encoding = "UTF-8")
```

```{r}
students # Data contains values over 100 and negative values.

students[, 2] = ifelse(students[, 2]>= 0 & students[, 2]<= 100,
                        students[, 2], NA)
students[, 3] = ifelse(students[, 3]>= 0 & students[, 3]<= 100,
                        students[, 3], NA)
students[, 4] = ifelse(students[, 4]>= 0 & students[, 4]<= 100,
                        students[, 4], NA)


students 
# ifelse statement, values other than 0 to 100 among the values in columns 2 to 4 are treated as NA.




# Increment numbers from 1 to 10 using the repeat statement
i = 1 # starting value of i is 1
repeat {
   if(i>10) { # Break repetition if i exceeds 10
     break
   } else {
     print(i)
     i = i+1 # Increment i by 1.
   }
}



# Increment numbers from 1 to 10 using while statement
i = 1 # The starting value of i is 1.
while(i < 10){ # repeat as long as i is less than 10
   print(i)
   i = i+1 # Increment i by 1.
}


# Create the second column of the multiplication table using the while statement
i = 1
while(i<10) {
   print(paste(2, "X", i, "=", 2*i))
   i = i+1
}

# Incrementing numbers from 1 to 10 using the for statement
for(i in 1:10) {
   print(i)
}

# Create the second column of the multiplication table using the for statement
for(i in 1:9) {
   print(paste(2, "X", i, "=", 2*i))
}

# Create multiplication table columns 2 to 9 using the for statement
for(i in 2:9) {
   for(j in 1:9) {
     print(paste(i, "X", j, "=", i*j))
   }
}

# Print only even numbers from 1 to 10
for(i in 1:10) {
   if(i%%2 == 0) {
     print(i)
   }
}

# Print decimal numbers from 1 to 10
for(i in 1:10) {
   check = 0
   for(j in 1:i) {
     if(i%%j ==0) {
       check = check+1
     }
   }
   if(check ==2) {
     print(i)
   }
}


# data contains values over 100 and negative values
students


for(i in 2:4) {
   students[, i] = ifelse(students[, i]>= 0 & students[, i]<= 100,
                          students[, i], NA)
}


students
```

#### Functions & Others

<br>

{{< video https://youtu.be/bl6RD1HLpTc >}}

```{r}
# 03 User-defined function: Bundle the desired function #
x=5
fa = 1 # Variable to store the factorial value
while(x>1) { # loop while x is greater than 1
  
   fa = fa*x # Multiply the value of x by fa and store it back in fa
   x = x-1 # Decrease x value by 1
   x
}
fa


fact = function(x) { # The name of the function is fact, the input is x
   fa = 1 # Variable to store the factorial value
   while(x>1) { # loop while x is greater than 1
     fa = fa*x # Multiply the value of x by fa and store it back in fa
     x = x-1 # Decrease x value by 1
   }
   return(fa) # returns the final calculated fa
}
fact(5) # Prints the result of calculating 5!


my.is.na<-function(x) { # Create a my.is.na function that combines the table(is.na()) functions into one
   table(is.na(x))
}

my.is.na(airquality) # This result is the same as table(is.na(airquality)).


table(is.na(airquality))


# 04 Data Cleaning Example 1: Missing Value Handling #

# Handling missing values using the is.na function
str(airquality) # Examine the structure of airquality data.

# NA in airquality data is indicated as TRUE, otherwise it is indicated as FALSE. There is a lot of data, so it is selected using the head function.
head(airquality)
head(is.na(airquality))
table(is.na(airquality)) # There are a total of 44 NAs.
sum(is.na(airquality)) # There are a total of 44 NAs.

table(is.na(airquality$Temp)) # Confirms that there is no NA in Temp.

table(is.na(airquality$Ozone)) # 37 NAs found in Ozone.

mean(airquality$Temp) # Temp without NA is averaged.

mean(airquality$Ozone) # Ozone with NA has an average of NA.

air_narm = airquality[!is.na(airquality$Ozone), ] # Extract only values without NA from the Ozone attribute.
air_narm
mean(air_narm$Ozone) # The mean function operates normally in data with missing values removed.

# Handling missing values using the na.omit function
air_narm1 = na.omit(airquality)
mean(air_narm1$Ozone)

# Handling missing values using the function property na.rm
mean(airquality$Ozone, na.rm = T)
mean(airquality$Ozone, na.rm = F)


table(is.na(airquality))

table(is.na(airquality$Ozone))

table(is.na(airquality$Solar.R))

air_narm = airquality[!is.na(airquality$Ozone) & !is.na(airquality$Solar.R), ]
mean(air_narm$Ozone)
```

```{r}
# 05 Data Cleansing Example 2: Outlier Processing #

# Patient data containing outliers
patients = data.frame(name = c("Patient 1", "Patient 2", "Patient 3", "Patient 4", "Patient 5"), age = c(22, 20, 25, 30, 27) , gender=factor(c("M", "F", "M", "K", "F")), blood.type = factor(c("A", "O", "B", " AB", "C")))
patients

# Remove outliers from gender
patients_outrm = patients[patients$gender=="M"|patients$gender=="F", ]
patients_outrm


# Remove outliers from gender and blood type
patients_outrm1 = patients[(patients$gender == "M"|patients$gender == "F") &
                              (patients$blood.type == "A" |
                                 patients$blood.type == "B"|
                                 patients$blood.type == "O"|
                                 patients$blood.type == "AB"), ]
patients_outrm1

# Patient data containing outliers
patients = data.frame(name = c("Patient 1", "Patient 2", "Patient 3", "Patient 4", "Patient 5"),
                       age = c(22, 20, 25, 30, 27),
                       gender = c(1, 2, 1, 3, 2),
                       blood.type = c(1, 3, 2, 4, 5))
patients

# Change outliers in gender to missing values
patients$gender = ifelse((patients$gender<1|patients$gender>2), NA, patients$gender)
patients

# Change outlier values in the penalty type to missing values
patients$blood.type = ifelse((patients$blood.type<1|patients$blood.type>4), NA,
                              patients$blood.type)
patients

# Remove all missing values
patients[!is.na(patients$gender)&!is.na(patients$blood.type), ]

boxplot(airquality[, c(1:4)]) # boxplot for Ozone, Solar.R, Wind, Temp
boxplot(airquality[, 1])$stats # Calculate Ozone's boxplot statistics

air = airquality # Copy airquality data to temporary storage variable
table(is.na(air$Ozone)) # Check the current number of NAs in Ozone

# Change outliers to NA
air$Ozone = ifelse(air$Ozone<1|air$Ozone>122, NA, air$Ozone)
table(is.na(air$Ozone)) # Check the number of NAs after processing outliers (increased by 2)

# Remove NA
air_narm = air[!is.na(air$Ozone), ]
mean(air_narm$Ozone) # By removing two outliers, the value is reduced compared to the result using the is.na function.
```

------------------------------------------------------------------------

### Class

------------------------------------------------------------------------

<br>

{{< video https://youtu.be/SICmTwGlT_o >}}

<br>


```{r}
load("data/List_KMP.RData")
names(List.KMP) <- c("p17", "p18", "p19", "d19")
p17_df <- List.KMP[["p17"]]
p18_df <- List.KMP[["p18"]]
p19_df <- List.KMP[["p19"]]
```

![<br>](images/clipboard-3258618279.png)

![](images/clipboard-2451608852.png)

```{r}
# create a function of calculating average and standard deviation of a vector

cal_avg_sd<-function(x){

  avg.x<-mean(x, na.rm=T)
  sd.x <-sd(x, na.rm=T)
  out.vector<-c(avg=avg.x, sd=sd.x)
  return(round(out.vector,2))

}

```

Let's apply this function to dataset 'p17'

```{r}
# Let's try this function
cal_avg_sd(p17_df$sp.mobile)

```

<br>

![<br>](images/clipboard-3372904388.png)

![](images/clipboard-1467283746.png)

<br>

![](images/clipboard-1493476935.png)

------------------------------------------------------------------------

### **Loop, Function, and Data Manipulation in R: A Dive into the Palmer Penguin Dataset**

In the world of data analysis with R, mastering the basics of loops, functions, and data manipulation is essential for any aspiring data scientist. While the **`tidyverse`** collection of packages offers powerful tools for these tasks, it's crucial to first understand the foundational techniques that underpin effective data analysis. This week, we embark on a journey with the Palmer Penguin dataset, focusing on traditional R approaches, saving the **`tidyverse`** exploration for our next installment.

#### **The Palmer Penguin Dataset: A Brief History**

The Palmer Penguin dataset, introduced by Dr. Kristen Gorman and the Palmer Station, Antarctica LTER, provides a compelling alternative to the classic Iris dataset for data exploration and visualization. Comprising data on 344 penguins across three species (Ad√©lie, Gentoo, and Chinstrap) from the Palmer Archipelago in Antarctica, the dataset includes variables such as species, island, bill length and depth, flipper length, body mass, and sex.

![](images/clipboard-2073651378.png)

This dataset not only offers rich insights into the biological diversity of Antarctic penguins but also serves as an excellent resource for teaching data science techniques due to its manageable size and complexity.

#### **Data Manipulation with Base R**

Before diving into complex manipulations, let's start by loading the Palmer Penguin dataset. Although it's available through the **`palmerpenguins`** package, we'll keep our focus on base R functions for this exploration.

#### **Loading the Dataset**

```{r}
# Assuming palmerpenguins is installed
library(palmerpenguins)
data("penguins")

```

With the data loaded, let's proceed to some basic manipulations using base R functions.

```{r}
palmerpenguins::penguins
```

![](images/clipboard-2493616168.png)

See more information on this dataset: <https://allisonhorst.github.io/palmerpenguins/>

<br>

#### **Subsetting Data**

Subsetting is crucial for isolating parts of the dataset for analysis. In base R, we can use the subset function or the **`[`** operator.

```{r}
# Subsetting to include only Ad√©lie penguins
adelie_penguins <- subset(penguins, species == "Adelie")

# Alternatively, using the bracket operator
adelie_penguins <- penguins[penguins$species == "Adelie", ]

```

#### **Handling Missing Values**

Missing data can skew analysis, making its identification and treatment essential.

```{r}
# Identifying missing values
sum(is.na(penguins))

# Removing rows with any missing value
penguins_clean <- na.omit(penguins)

```

#### **Creating Custom Functions**

Custom functions in R amplify the power of data manipulation by encapsulating repetitive tasks.

```{r}
# A function to summarize penguin measurements
summarize_measurements <- function(data) {
  summary <- data.frame(
    Mean_FlipperLength = mean(data$flipper_length_mm, na.rm = TRUE),
    SD_FlipperLength = sd(data$flipper_length_mm, na.rm = TRUE),
    Mean_BillLength = mean(data$bill_length_mm, na.rm = TRUE),
    SD_BillLength = sd(data$bill_length_mm, na.rm = TRUE)
  )
  return(summary)
}

# Applying the function to Ad√©lie penguins
adelie_summary <- summarize_measurements(adelie_penguins)
adelie_summary

```

#### **Looping Through Data**

Loops are essential for iterative operations. In R, **`for`** loops allow us to apply operations across elements, rows, or columns in a dataset.

```{r}
# Calculating mean body mass for each species
species_list <- unique(penguins$species)
# Create an empty vector
mean_mass_by_species <- numeric(0)

for (i in seq_along(species_list)) {
  species_data <- subset(penguins, species == species_list[i])
  mean_mass_by_species[i] <- mean(species_data$body_mass_g, na.rm = TRUE)
}

names(mean_mass_by_species) <- species_list
mean_mass_by_species

```

This code iterates through each species in the dataset, calculating and storing the mean body mass.

Let's use customized function instead.

```{r}
species_list <- unique(penguins$species)
# Create an empty list
summary_by_species <- list(0)

for (i in seq_along(species_list)) {
  species_data <- subset(penguins, species == species_list[i])
  summary_by_species[[i]] <- summarize_measurements(species_data)
}

names(summary_by_species) <- species_list
summary_by_species
```

<br>

### Exploration with tidyverse

Let‚Äôs enhance our exploration of the Palmer Penguin dataset by paralleling our original code snippets with their **`tidyverse`** counterparts. The **`tidyverse`** is a collection of R packages designed for data science that makes data manipulation, exploration, and visualization easier and more intuitive.

#### **Loading the Dataset with `tidyverse`**

First, let‚Äôs ensure we have the **`tidyverse`** and **`palmerpenguins`** packages loaded. If you haven't installed these packages, you can do so using **`install.packages("tidyverse")`** and **`install.packages("palmerpenguins")`**.

```{r}
library(tidyverse)
library(palmerpenguins)

```

#### **Subsetting Data with `dplyr`**

With **`dplyr`**, subsetting becomes more readable:

```{r}
# Subsetting to include only Ad√©lie penguins using dplyr
adelie_penguins <- penguins %>%
  filter(species == "Adelie")

```

#### **Handling Missing Values with `tidyverse`**

The **`tidyverse`** provides a straightforward approach to dealing with missing values:

```{r}
# Removing rows with any missing value using dplyr
penguins_clean <- penguins %>%
  drop_na()

```

#### **Creating Custom Functions and Applying them into dataset**

While base R functions are powerful, integrating them with **`tidyverse`** functionalities can make your workflows even more efficient:

```{r}
# Using dplyr and purrr to summarize measurements
summarize_measurements <- function(data) {
  data %>%
    summarise(Mean_FlipperLength = mean(flipper_length_mm, na.rm = TRUE),
              SD_FlipperLength = sd(flipper_length_mm, na.rm = TRUE),
              Mean_BillLength = mean(bill_length_mm, na.rm = TRUE),
              SD_BillLength = sd(bill_length_mm, na.rm = TRUE))
}

# Applying the function to Ad√©lie penguins
adelie_summary <- adelie_penguins %>%
  summarize_measurements()
adelie_summary

```

#### **Looping Through Data with `group_by` and `summarise`**

```{r}
# Calculating mean body mass for each species with dplyr
mean_mass_by_species <- penguins %>%
  group_by(species) %>%
  summarise(MeanBodyMass = mean(body_mass_g, na.rm = TRUE))

mean_mass_by_species

```

By incorporating **`tidyverse`** techniques, we can make our code more concise and readable, especially for those new to programming or R. The **`tidyverse`** syntax is designed to be intuitive, allowing you to more easily understand and articulate what your code is doing, which is particularly beneficial when sharing your work with others or when collaborating on data science projects.

<br>

### **Using `purrr` for Advanced Data Manipulation**

**`purrr`** enhances functional programming within the **`tidyverse`** ecosystem, providing tools for working effectively with lists and functional programming paradigms. Here's how we could use **`purrr`** in conjunction with **`dplyr`** for a task similar to our mean body mass calculation:

#### Calculating Mean Body Mass by Species with **`purrr`**

We can use **`purrr`**'s **`map`** functions to apply operations across elements in a list, which is particularly useful for more complex or nested operations. While the direct calculation of mean body mass by species is more straightforward with **`dplyr`** alone, let's consider a scenario where **`purrr`** demonstrates its utility:

```{r}
library(tidyverse)
# Splitting the data by species
species_split <- split(penguins, penguins$species)

# Calculating mean body mass for each species using purrr
mean_mass_by_species <- map_dfr(species_split, 
                                ~summarise(.x, MeanBodyMass = mean(body_mass_g, na.rm = TRUE)))

mean_mass_by_species

```
